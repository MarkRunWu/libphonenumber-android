apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

def artifactName = rootProject.name
group rootProject.group
version rootProject.version

sourceCompatibility = JavaVersion.VERSION_1_6
targetCompatibility = JavaVersion.VERSION_1_6

android {
  namespace 'io.michaelrocks.libphonenumber.android'
  compileSdkVersion projectCompileSdkVersion
  buildToolsVersion projectBuildToolsVersion

  defaultConfig {
    minSdkVersion projectMinSdkVersion
    targetSdkVersion projectTargetSdkVersion

    versionCode 1
    versionName version
  }

  buildTypes {
    release {
      minifyEnabled false
    }
  }

  variantFilter { variant ->
    if (variant.buildType.name != 'release') {
      variant.setIgnore(true)
    }
  }

  lintOptions {
    abortOnError false
  }
}

dependencies {
  testImplementation "junit:junit:$junitVersion"
}

android.libraryVariants.all { variant ->
  tasks.addRule("Publishing configuration for ${variant.name} variant") { taskName ->
    if (taskName == "javadoc${variant.name.capitalize()}") {
      tasks.create(taskName, Javadoc) {
        source = variant.sourceSets.javaDirectories
        classpath += project.files(variant.javaCompileProvider.map { it.classpath })
        classpath += project.files(android.getBootClasspath().join(File.pathSeparator))

        if (JavaVersion.current().isJava8Compatible()) {
          options.addStringOption('Xdoclint:none', '-quiet')
          options.encoding "UTF-8"
        }
      }
    } else if (taskName == "javadocJar${variant.name.capitalize()}") {
      tasks.create(taskName, Jar) {
        archiveClassifier.set('javadoc')
        def javadoc = tasks["javadoc${variant.name.capitalize()}"]
        from javadoc.destinationDir
        dependsOn javadoc
      }
    } else if (taskName == "sourcesJar${variant.name.capitalize()}") {
      tasks.create(taskName, Jar) {
        archiveClassifier.set('sources')
        from variant.sourceSets.javaDirectories
      }
    }
  }
}

publishing {
  android.libraryVariants.all { variant ->
    publications {
      create(variant.name.capitalize(), MavenPublication) {
        artifactId artifactName
        variant.outputs.each { output ->
          artifact output.packageLibrary
        }

        artifact tasks["javadocJar${variant.name.capitalize()}"]
        artifact tasks["sourcesJar${variant.name.capitalize()}"]

        pom {
          name = 'libphonenumber-android'
          description = 'An Android port of Google\'s libphonenumber.'
          inceptionYear = '2016'
          url = 'https://github.com/michaelrocks/libphonenumber-android'
          packaging = 'aar'

          licenses {
            license {
              name = 'The Apache License, Version 2.0'
              url = 'http://www.apache.org/licenses/LICENSE-2.0.txt'
              distribution = 'repo'
            }
          }
          developers {
            developer {
              id = 'MichaelRocks'
              name = 'Michael Rozumyanskiy'
              email = 'michael.rozumyanskiy@gmail.com'
            }
          }
          scm {
            connection = 'scm:git:git://github.com/michaelrocks/libphonenumber-android.git'
            developerConnection = 'scm:git:ssh://git@github.com/michaelrocks/libphonenumber-android.git'
            url = 'https://github.com/michaelrocks/libphonenumber-android'
          }
        }

        def dependencies = project.configurations["${variant.baseName}CompileClasspath"].allDependencies
        if (!dependencies.empty) {
          pom.withXml {
            asNode().appendNode("dependencies").with {
              dependencies.each { dependency ->
                appendNode("dependency").with {
                  appendNode("groupId", dependency.group)
                  appendNode("artifactId", dependency.name)
                  appendNode("version", dependency.version)
                }
              }
            }
          }
        }
      }
    }
  }

  repositories {
    if (project.hasProperty('mavenCentralRepositoryUsername') && project.hasProperty('mavenCentralRepositoryPassword')) {
      maven {
        name 'Sonatype'
        url 'https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/'
        credentials {
          username mavenCentralRepositoryUsername
          password mavenCentralRepositoryPassword
        }
      }
    }
  }
}

signing {
  android.libraryVariants.all { variant ->
    sign publishing.publications.getByName(variant.name.capitalize())
  }
}
